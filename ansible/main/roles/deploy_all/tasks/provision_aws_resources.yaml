---

- name: Create a new EC2 key pair
  ec2_key:
    name: "{{ key_name }}"
    region: "{{ region_name }}"
  register: ec2_key
- name: Save private key
  copy: content="{{ ec2_key.key.private_key }}" dest="./keys/{{ key_name }}.pem" mode=0600
  when: ec2_key.changed

- name: Obtain default VPC information
  ec2_vpc_net_info:
    filters:
      "isDefault": "true"
  register: default_vpc

- name: Obtain subnets for default VPC
  ec2_vpc_subnet_info:
    filters:
      vpc-id: "{{ default_vpc['vpcs'][0]['vpc_id'] }}"
  register: subnet_info

# Use jinja to select a random subnet from the list of subnet ids
- set_fact:
    vpc_id: "{{ default_vpc['vpcs'][0]['vpc_id'] }}"
    random_subnet: "{{ subnet_info.subnets|map(attribute='id')|list|random }}"

# Create Security Group and save the output into security_group
- name: Create Security Group
  ec2_group:
    name: "{{ instance_name }}-sg"
    description: Security Group for {{ instance_name }}
    vpc_id: "{{ vpc_id }}"
    region: "{{ region_name }}"
    rules:
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: "0.0.0.0/0"
        rule_desc: "allow port 22 for all"
      - proto: tcp
        from_port: "{{ server_port_to }}"
        to_port: "{{ server_port_to }}"
        cidr_ip: "0.0.0.0/0"
        rule_desc: "allow port server_port_to for all"
      - proto: tcp
        from_port: "{{ client_port_to }}"
        to_port: "{{ client_port_to }}"
        cidr_ip: "0.0.0.0/0"
        rule_desc: "allow port client_port_to for all"
  register: security_group

- name: Create EC2 instances
  ec2_instance:
    name: "{{ app_name }}-{{ app_env }}"
    key_name: "{{ key_name }}"
    region: "{{ region_name }}"
    instance_type: "{{ instance_type }}"
    exact_count: "{{ ec2_backend_count }}"
    image_id: "{{ ami_id }}"
    security_group: "{{ instance_name }}-sg"
    vpc_subnet_id: "{{ random_subnet }}"
    state: "running"
    filters:
      "tag:AppName": "{{ app_name }}-{{ app_env }}"
      "instance-state-name": "running"
    network:
      assign_public_ip: true
    wait: yes
    tags:
      AppName: "{{ app_name }}-{{ app_env }}"
  register: remote

- name: get ec2 info
  block:
    - name: Get Running instance Info
      ec2_instance_info:
        filters:
          "tag:AppName": "{{ app_name }}-{{ app_env }}"
          "instance-state-name": "running"
      register: ec2info
    - name: ec2 info
      debug: msg="{{ ec2info.instances }}"
    - name: public DNS
      debug: msg="{{ item.public_dns_name }}"
      loop: "{{ ec2info.instances }}"
      loop_control:
        label: "{{ item.public_dns_name }}"


- name: Add the newly created EC2 instance(s) to the local host group
  lineinfile:
    path: "inventory/remote"
    regexp: "{{ item.public_ip_address }}"
    insertafter: "[remote]"
    line: "{{ item.public_ip_address }} ansible_user=ubuntu ansible_ssh_private_key_file=keys/{{ key_name }}.pem ansible_ssh_extra_args='-o StrictHostKeyChecking=no'"
  with_items: "{{ ec2info.instances }}"
  no_log: true